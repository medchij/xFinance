const express = require("express");
const cors = require("cors");
const fs = require("fs");
const fsp = fs.promises;
const path = require("path");
const serverless = require("serverless-http");

// ---------------- üîß Config ----------------
const CONFIG_PATH = path.join(__dirname, "config", "current-env.json");

function readConfigSafe() {
  try {
    const raw = fs.readFileSync(CONFIG_PATH, "utf8");
    return raw ? JSON.parse(raw) : {};
  } catch (_) {
    return {};
  }
}

function resolveDataDir() {
  const cfg = readConfigSafe();
  const raw = process.env.DATA_DIR || cfg.DATA_DIR || "./dataNany";
  return raw.startsWith(".")
    ? path.resolve(__dirname, raw)
    : path.resolve(process.cwd(), raw);
}

const jsonFile = (name) => path.join(resolveDataDir(), name);

// ---------------- üöÄ Express ----------------
const app = express();
app.use(cors());
app.use(express.json());

// ---------------- üìÅ Serve JSON ----------------
function serveJson(filename, errorMessage) {
  return async (req, res) => {
    try {
      const filePath = jsonFile(filename);
      console.log("üì§ Serving:", filePath);
      const data = await fsp.readFile(filePath, "utf8");
      res.json(JSON.parse(data));
    } catch (err) {
      console.error("‚ùå", err.message);
      res.status(500).json({ message: errorMessage, error: err.message });
    }
  };
}


app.post("/api/save-env", (req, res) => {
  const updatedEnv = req.body; // { DATA_DIR: "./dataMall" }
  const configPath = path.join(__dirname, "config", "current-env.json");

  fs.writeFile(configPath, JSON.stringify(updatedEnv, null, 2), (err) => {
    if (err) {
      console.error("‚ùå config —Ö–∞–¥–≥–∞–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:", err);
      return res.status(500).json({ message: "–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞" });
    }

    console.log("üìÅ DATA_DIR —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç:", updatedEnv.DATA_DIR);
    res.json({ message: "‚úÖ DATA_DIR –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞–¥–≥–∞–ª–∞–≥–¥–ª–∞–∞" });
  });
});

const createJsonRecord = (fileName, generateRecord, uniqueField) => async (req, res) => {
  try {
    const filePath = jsonFile(fileName);
    let records = [];

    try {
      const txt = await fsp.readFile(filePath, "utf8");
      records = JSON.parse(txt);
    } catch (_) {}

    const newRecord = generateRecord(req.body, records);

    if (uniqueField) {
      const exists = records.find((r) => r[uniqueField] === newRecord[uniqueField]);
      if (exists) {
        return res.status(409).json({ type: "validation", message: `${uniqueField} –¥–∞–≤—Ö–∞—Ä–¥—Å–∞–Ω –±–∞–π–Ω–∞` });
      }
    }

    records.push(newRecord);

    // Prod –¥—ç—ç—Ä file write —Ö–∞–¥–≥–∞–ª–∞–≥–¥–∞—Ö–≥“Ø–π
    if (process.env.VERCEL) {
      return res.json({ warning: "Prod –¥—ç—ç—Ä write —Ö–∞–¥–≥–∞–ª–∞–≥–¥–∞—Ö–≥“Ø–π", data: newRecord });
    }

    await fsp.writeFile(filePath, JSON.stringify(records, null, 2), "utf8");
    res.status(201).json({ type: "success", message: `${fileName} –Ω—ç–º—ç–≥–¥–ª—ç—ç`, data: newRecord });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

const updateJsonRecord = (fileName, matchFn, updateFn) => async (req, res) => {
  try {
    const filePath = jsonFile(fileName);
    let records = [];

    try {
      const txt = await fsp.readFile(filePath, "utf8");
      records = JSON.parse(txt);
    } catch (e) {
      return res.status(500).json({ type: "server", message: `${fileName} —É–Ω—à–∏—Ö–∞–¥ –∞–ª–¥–∞–∞` });
    }

    const idx = records.findIndex((item) => matchFn(item, req));
    if (idx === -1) {
      return res.status(404).json({ type: "not_found", message: "–¢—É—Ö–∞–π–Ω –±–∏—á–ª—ç–≥ –æ–ª–¥—Å–æ–Ω–≥“Ø–π" });
    }

    const updated = updateFn(records[idx], req);
    records[idx] = updated;

    if (process.env.VERCEL) {
      return res.json({ warning: "Prod –¥—ç—ç—Ä write —Ö–∞–¥–≥–∞–ª–∞–≥–¥–∞—Ö–≥“Ø–π", data: updated });
    }

    await fsp.writeFile(filePath, JSON.stringify(records, null, 2), "utf8");
    res.json({ type: "success", message: `${fileName} —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç`, data: updated });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};



// GET JSON
app.get("/api/currency", serveJson("Currency.json", "Currency.json —É–Ω—à–∏—Ö–∞–¥ –∞–ª–¥–∞–∞"));
app.get("/api/account", serveJson("Account.json", "Account.json —É–Ω—à–∏—Ö–∞–¥ –∞–ª–¥–∞–∞"));
app.get("/api/branch", serveJson("Branch.json", "Branch.json —É–Ω—à–∏—Ö–∞–¥ –∞–ª–¥–∞–∞"));
app.get("/api/glaccount", serveJson("GLAccount.json", "GLAccount.json —É–Ω—à–∏—Ö–∞–¥ –∞–ª–¥–∞–∞"));
app.get("/api/glcategory", serveJson("GLCatergory.json", "GLCatergory.json —É–Ω—à–∏—Ö–∞–¥ –∞–ª–¥–∞–∞"));
app.get("/api/cf", serveJson("CF.json", "CF.json —É–Ω—à–∏—Ö–∞–¥ –∞–ª–¥–∞–∞"));
app.get("/api/customer", serveJson("Customer.json", "Customer.json —É–Ω—à–∏—Ö–∞–¥ –∞–ª–¥–∞–∞"));
app.get("/api/settings", serveJson("Settings.json", "Settings.json —É–Ω—à–∏—Ö–∞–¥ –∞–ª–¥–∞–∞"));

// Proxy –∂–∏—à—ç—ç
app.get("/api/merchant/:id", async (req, res) => {
  try {
    const r = await fetch(`https://www.opendatalab.mn/search/${req.params.id}`);
    const html = await r.text();
    res.send(html);
  } catch (err) {
    res.status(500).json({ error: "Proxy fetch failed", detail: err.message });
  }
});

// POST JSON
app.post(
  "/api/settings",
  createJsonRecord(
    "Settings.json",
    (body, records) => ({
      id: (records.length + 1).toString(),
      tab: body.tab,
      name: body.name,
      value: body.value,
      create_date: new Date().toISOString(),
    }),
    "name"
  )
);

app.post(
  "/api/account",
  createJsonRecord(
    "Account.json",
    (body, records) => ({
      id: (records.length + 1).toString(),
      "–î–∞–Ω—Å–Ω—ã –¥—É–≥–∞–∞—Ä": body["–î–∞–Ω—Å–Ω—ã –¥—É–≥–∞–∞—Ä"],
      "–î–∞–Ω—Å–Ω—ã –Ω—ç—Ä": body["–î–∞–Ω—Å–Ω—ã –Ω—ç—Ä"],
      –í–∞–ª—é—Ç: body["–í–∞–ª—é—Ç"],
      –°–∞–ª–±–∞—Ä: body["–°–∞–ª–±–∞—Ä"],
      "–ù—ç—ç—Å—ç–Ω –æ–≥–Ω–æ–æ": new Date().toLocaleString("en-GB"),
    }),
    "–î–∞–Ω—Å–Ω—ã –¥—É–≥–∞–∞—Ä"
  )
);

app.post(
  "/api/customer",
  createJsonRecord(
    "Customer.json",
    (body, records) => ({
      id: (records.length + 1).toString(),
      name: body.name,
      create_date: new Date().toLocaleString("en-GB"),
      status: body.status,
    }),
    "name"
  )
);

// PUT JSON
app.put(
  "/api/settings/:id",
  updateJsonRecord(
    "Settings.json",
    (item, req) => item.id === req.params.id,
    (item, req) => {
      if (req.body.name !== undefined) item.name = req.body.name;
      if (req.body.value !== undefined) item.value = req.body.value;
      item.update_date = new Date().toISOString();
      return item;
    }
  )
);

app.put(
  "/api/gl-tooluurchange",
  updateJsonRecord(
    "GLAccount.json",
    (item, req) => item["–î–∞–Ω—Å–Ω—ã –¥—É–≥–∞–∞—Ä"] === req.body.edd,
    (item, req) => {
      item["–¢–æ–æ–ª—É—É—Ä"] = (parseInt(item["–¢–æ–æ–ª—É—É—Ä"] || "0") + 1).toString();
      return item;
    }
  )
);

if (!process.env.VERCEL) {
  const port = process.env.PORT || 4000;
  app.listen(port, () => console.log(`‚úÖ Local http://localhost:${port}`));
}

// Vercel-–¥ –∑–æ—Ä–∏—É–ª—Å–∞–Ω handler
module.exports = serverless(app);
