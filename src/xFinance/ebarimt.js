import {withLoading} from "./apiHelpers";
import { BASE_URL, fetchWithTimeout } from "../config";
export async function getMerchantCategoryById(setMessage, setLoading) {
  return await withLoading(setLoading, setMessage, async () => {
    const id = await Excel.run(async (context) => {
      const range = context.workbook.getActiveCell();
      range.load("values");
      await context.sync();
      const value = range.values[0][0];
      if (!value || isNaN(value)) throw new Error("üìå ID —Ç–æ–æ —Ö—ç–ª–±—ç—Ä—Ç—ç–π –±–∞–π—Ö —ë—Å—Ç–æ–π.");
      return value;
    });

    const url = `${BASE_URL}/api/merchant/${id}`;
    

    let response;
    try {
      response = await fetch(url);
    } catch (error) {
      throw new Error("‚ùå –°–∞–π—Ç —Ä—É—É fetch —Ö–∏–π—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: " + error.message);
    }

    if (!response.ok) {
      throw new Error(`‚ùå HTTP –∞–ª–¥–∞–∞: ${response.status}`);
    }

    const htmlText = await response.text();

    if (typeof DOMParser === "undefined") {
      throw new Error("‚ùå DOMParser –¥—ç–º–∂–∏–≥–¥—ç—Ö–≥“Ø–π –æ—Ä—á–∏–Ω–¥ –∞–∂–∏–ª–ª—É—É–ª–∂ –±–∞–π–Ω–∞.");
    }

    const parser = new DOMParser();
    const doc = parser.parseFromString(htmlText, "text/html");
    const table = doc.querySelector("table");
    const pageTitle = doc.querySelector("title")?.textContent || "–ì–∞—Ä—á–∏–≥ –æ–ª–¥—Å–æ–Ω–≥“Ø–π";
    if (!table) {
      throw new Error("‚ö†Ô∏è –•“Ø—Å–Ω—ç–≥—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π.");
    }

     let result = `${pageTitle}\n`;
    
    const rows = table.querySelectorAll("tr");

    for (let i = 1; i < rows.length; i++) {
      const cells = rows[i].querySelectorAll("td");
      const rowText = Array.from(cells)
        .map((cell) => cell.textContent.trim())
        .join(" ");
      result += rowText + "\n";
    }

    // Excel –¥—ç—ç—Ä –±–∏—á–∏—Ö
    

    setMessage("üìã “Æ—Ä –¥“Ø–Ω:\n" + result);
    //console.log("üìã “Æ—Ä –¥“Ø–Ω:", result);
    return { result, response };
  });
}
