import { BASE_URL } from "../config";

export async function withLoading(setLoading, setMessage, fn) {
  try {
    setLoading(true);
    const output = await fn();

    if (output?.response instanceof Response) {
      console.log("üì° HTTP:", output.response.statusText + " " + output.response.status);
      if (!output.response.ok) {
        const text = await output.response.text();
        throw new Error("‚ùå –°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞: " + text);
      }
    }

    return output;

  } catch (error) {
    setMessage("‚ùå –ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: " + (error?.message || error));
    console.error("API Error:", error?.message || error);
    throw error;
  } finally {
    setLoading(false);
  }
}

// –ó–ê–°–í–ê–†: externalAPI.js-–¥ –∞—à–∏–≥–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ company_id-–∞–∞—Ä –¥—É—É–¥–¥–∞–≥ —Ö—É–≤–∏–ª–±–∞—Ä—ã–≥ —Å—ç—Ä–≥—ç—ç–≤.
export async function loadSettings(company_id) {
    if (!company_id) throw new Error("‚ö†Ô∏è –¢–æ—Ö–∏—Ä–≥–æ–æ–≥ –∞—á–∞–∞–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ –∫–æ–º–ø–∞–Ω–∏ ID —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π.");
    const res = await fetch(`${BASE_URL}/api/settings?company_id=${company_id}`);
    if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || "‚ö†Ô∏è –¢–æ—Ö–∏—Ä–≥–æ–æ–≥ —Ç–∞—Ç–∞–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π.");
    }
    return await res.json();
}

export function getSettingValue(settings, name) {
  return settings.find((s) => s.name === name)?.value || "";
}
export function getSettingId(settings, name) {
  return settings.find((s) => s.name === name)?.id || "";
}

// Excel –æ–≥–Ω–æ–æ–≥ –Ω–æ—Ä–º—á–ª–æ—Ö —Ç—É—Å–ª–∞—Ö —Ñ—É–Ω–∫—Ü
export function normalizeExcelDate(value, label) {
  if (!value || (typeof value !== "number" && typeof value !== "string")) {
    throw new Error(`üìÖ ${label} –Ω“Ø–¥—ç–Ω–¥ –æ–≥–Ω–æ–æ –æ—Ä—É—É–ª–Ω–∞ —É—É (2025-01-30 —ç—Å–≤—ç–ª Excel –æ–≥–Ω–æ–æ–Ω—ã format)`);
  }
  if (typeof value === "number") {
    const excelEpoch = new Date(1899, 11, 30);
    const dateObj = new Date(excelEpoch.getTime() + value * 86400000);
    value = dateObj.toISOString().split("T")[0];
  }
  if (typeof value === "string" && !/^\d{4}-\d{2}-\d{2}$/.test(value)) {
    throw new Error(`üìÖ ${label} –±—É—Ä—É—É –±–∞–π–Ω–∞. YYYY-MM-DD —Ö—ç–ª–±—ç—Ä—Ç—ç–π –±–∞–π–≤–∞–ª –∑–æ—Ö–∏–º–∂—Ç–æ–π.`);
  }
  return value.toString().trim();
}

// 15-—Å –¥—ç—ç—à —Ü–∏—Ñ—Ä—Ç—ç–π —Ç–æ–æ–≥ Excel-–¥ —Ç–µ–∫—Å—Ç—ç—ç—Ä —Ö–∞–¥–≥–∞–ª–∞—Ö
export function formatLargeNumber(cell) {
  if (typeof cell === "number" && cell.toString().length > 15) {
    return "'" + cell.toString();
  }
  if (typeof cell === "string" && /^\d{16,}$/.test(cell)) {
    return "'" + cell;
  }
  return cell;
}

// (–°–æ–Ω–≥–æ–ª—Ç) skipRight –ø–∞—Ä–∞–º–µ—Ç—Ä: –±–∞—Ä—É—É–Ω —Ç–∞–ª—ã–Ω n –±–∞–≥–∞–Ω—ã–≥ “Ø–ª —Ç–æ–æ—Ü–æ—Ö
export async function hideEmptyColumns(setMessage, skipRight = 14) {
  try {
    await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getActiveWorksheet();
      const usedRange = sheet.getUsedRange();
      usedRange.load(["rowCount", "columnCount"]);
      await context.sync();

      const rowCount = usedRange.rowCount;
      const columnCount = Math.max(0, usedRange.columnCount - (skipRight || 0));
      console.log(`üìä –•—ç—Ä—ç–≥–ª—ç–≥–¥—ç–∂ –±—É–π –º—É–∂: ${rowCount} –º”©—Ä, ${columnCount} –±–∞–≥–∞–Ω–∞ (–±–∞—Ä—É—É–Ω–∞–∞—Å –∞–ª–≥–∞—Å—Å–∞–Ω: ${skipRight})`);

      for (let i = 0; i < columnCount; i++) {
        const colRange = sheet.getRangeByIndexes(0, i, rowCount, 1);
        colRange.load("values");
        await context.sync();

        const values = colRange.values.flat();
        const isEmpty = values.every((val) => val === null || val === "");
        if (isEmpty) colRange.columnHidden = true;
      }

      await context.sync();
      if (setMessage) setMessage("‚úÖ –•–æ–æ—Å–æ–Ω –±–∞–≥–∞–Ω—É—É–¥ –∞–º–∂–∏–ª—Ç—Ç–∞–π –Ω—É—É–∂ –¥—É—É—Å–ª–∞–∞.");
    });
  } catch (error) {
    console.error("‚ùå –•–æ–æ—Å–æ–Ω –±–∞–≥–∞–Ω–∞ –Ω—É—É—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);
    if (setMessage) setMessage("‚ùå –ê–ª–¥–∞–∞: " + error.message);
  }
}

// üé® –°–∞–Ω–∞–º—Å–∞—Ä–≥“Ø–π ”©–Ω–≥”© “Ø“Ø—Å–≥—ç—Ö (async –±–∏—à)
export function getRandomPastelColor() {
  const r = Math.floor(180 + Math.random() * 60);
  const g = Math.floor(180 + Math.random() * 60);
  const b = Math.floor(180 + Math.random() * 60);
  return "#" + r.toString(16).padStart(2, "0") + g.toString(16).padStart(2, "0") + b.toString(16).padStart(2, "0");
}

export function handleHttpError(response, result) {
  const statusCode = result?.status?.code;
  const httpCode = response.status;
  const msg =
    result?.status?.message || result?.message || result?.error || `–°–µ—Ä–≤–µ—Ä–∏–π–Ω —Ö–∞—Ä–∏—É –∞–º–∂–∏–ª—Ç–≥“Ø–π: ${httpCode}`;

  if (httpCode === 401 || statusCode === 401) {
    throw new Error("Token —Ö“Ø—á–∏–Ω–≥“Ø–π —ç—Å–≤—ç–ª —Ö—É–≥–∞—Ü–∞–∞ –Ω—å –¥—É—É—Å—Å–∞–Ω –±–∞–π–Ω–∞. –î–∞—Ö–∏–Ω –Ω—ç–≤—Ç—ç—Ä–Ω—ç “Ø“Ø.");
  }
  if (httpCode === 404 || statusCode === 404) {
    throw new Error(`–î–∞—Ç–∞ –æ–ª–¥—Å–æ–Ω–≥“Ø–π: ${msg}`);
  }
  if (httpCode === 400 || statusCode === 400) {
    throw new Error(`–ê–ª–¥–∞–∞—Ç–∞–π —Ö“Ø—Å—ç–ª—Ç: ${msg}`);
  }

  throw new Error(msg); // –∏–ª“Ø“Ø –∑–∞–π–≥“Ø–π
}

// ‚úÖ 3) –î–∞–≤—Ö–∞—Ä–¥–∞–ª–≥“Ø–π —Ö–∞–¥–≥–∞–ª–∞—Ö ‚Äî set –∞—à–∏–≥–ª–∞–Ω–∞
export async function saveSetting(key, value) {
  return await Excel.run(async (context) => {
    const settings = context.workbook.settings;
    settings.set(key, value); // add –±–∏—à ‚Äî set (–±–∞–π—Ö–≥“Ø–π –±–æ–ª “Ø“Ø—Å–≥—ç–Ω—ç, –±–∞–π–≤–∞–ª —à–∏–Ω—ç—á–∏–ª–Ω—ç)
    await context.sync();
  });
}
