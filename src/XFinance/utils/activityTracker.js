/**
 * Centralized User Activity Tracker
 * Tracks all user interactions and system events in one place
 */
import logger from "./logger";

class ActivityTracker {
  constructor() {
    this.sessionId = this.generateSessionId();
    this.startTime = new Date().toISOString();
    this.activityCount = 0;
    this.lastLogTime = 0;
    this.lastLogMessage = "";
    this.duplicateThreshold = 1000; // 1 —Å–µ–∫—É–Ω–¥–∏–π–Ω –¥–æ—Ç–æ—Ä –∏–∂–∏–ª –ª–æ–≥ –¥–∞–≤—Ç–∞—Ö–≥“Ø–π

    // –≠–Ω–≥–∏–π–Ω —Ç–æ—Ö–∏—Ä–≥–æ–æ
    this.config = {
      enableNavigation: false, // Navigation tracking: –ò—Ö—ç–≤—á–ª—ç–Ω —à–∞–∞—Ä–¥–ª–∞–≥–∞–≥“Ø–π
      enableComponents: false, // Component tracking: –®–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π “Ø–µ–¥ –ª –∏–¥—ç–≤—Ö–∂“Ø“Ø–ª—ç—Ö
      enableModals: false, // Modal tracking: –®–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π “Ø–µ–¥ –ª –∏–¥—ç–≤—Ö–∂“Ø“Ø–ª—ç—Ö
      enableUserActions: true, // User action tracking: –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω “Ø–π–ª–¥–ª“Ø“Ø–¥ —á—É—Ö–∞–ª
      enableErrors: true, // Error tracking: –ê–ª–¥–∞–∞ –º—ç–¥—ç—ç–ª—ç–ª —á—É—Ö–∞–ª
      enableApi: true, // API tracking: Performance –±–æ–ª–æ–Ω debugging-–¥ —á—É—Ö–∞–ª
      enablePerformance: true, // Performance tracking: –°–∏—Å—Ç–µ–º–∏–π–Ω –≥“Ø–π—Ü—ç—Ç–≥—ç–ª —Ö—è–Ω–∞—Ö
      enableSecurity: true, // Security tracking: –ê—é—É–ª–≥“Ø–π –±–∞–π–¥–ª—ã–Ω –ª–æ–≥
      enableLogViewer: false, // LogViewer tracking: LogViewer –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏–π–Ω –ª–æ–≥ —Ö–∞—Å–∞—Ö
    };
  }

  // Singleton pattern
  static getInstance() {
    if (!ActivityTracker.instance) {
      ActivityTracker.instance = new ActivityTracker();
    }
    return ActivityTracker.instance;
  }

  generateSessionId() {
    return "session_" + Date.now() + "_" + Math.random().toString(36).substr(2, 9);
  }

  // –ê–∑–∏–π–Ω —Ü–∞–≥–∏–π–Ω –±“Ø—Å (+8) –∞—à–∏–≥–ª–∞–Ω DD.MM.YYYY HH:mm:ss —Ñ–æ—Ä–º–∞—Ç–∞–∞—Ä
  getAsiaTimestamp() {
    const now = new Date();
    const asiaTime = new Date(now.getTime() + 8 * 60 * 60 * 1000);
    const day = String(asiaTime.getUTCDate()).padStart(2, "0");
    const month = String(asiaTime.getUTCMonth() + 1).padStart(2, "0");
    const year = asiaTime.getUTCFullYear();
    const hours = String(asiaTime.getUTCHours()).padStart(2, "0");
    const minutes = String(asiaTime.getUTCMinutes()).padStart(2, "0");
    const seconds = String(asiaTime.getUTCSeconds()).padStart(2, "0");
    return `${day}.${month}.${year} ${hours}:${minutes}:${seconds}`;
  }

  // Get current user info from localStorage or session
  getCurrentUser() {
    try {
      // Try to get user from localStorage
      const token = localStorage.getItem("authToken");
      if (token) {
        // Decode JWT token to get user info (basic decoding, not verification)
        const payload = JSON.parse(atob(token.split(".")[1]));
        return payload.username || payload.email || payload.id || "authenticated";
      }

      // Try to get user from sessionStorage
      const currentUser = JSON.parse(localStorage.getItem("currentUser") || "null");
      if (currentUser) {
        return currentUser.username || currentUser.email || currentUser.name || "authenticated";
      }
    } catch (e) {
      // Failed to decode or parse
    }
    return "anonymous";
  }

  // Tracking –∏–¥—ç–≤—Ö—Ç—ç–π —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
  isTrackingEnabled(type) {
    switch (type) {
      case "navigation":
        return this.config.enableNavigation;
      case "component":
        return this.config.enableComponents;
      case "modal":
        return this.config.enableModals;
      case "user_action":
      case "button":
      case "form":
      case "search":
      case "filter":
        return this.config.enableUserActions;
      case "api":
      case "data":
        return this.config.enableApi;
      case "error":
      case "warning":
        return this.config.enableErrors;
      case "performance":
        return this.config.enablePerformance;
      case "security":
      case "auth":
        return this.config.enableSecurity;
      case "LogViewer":
      case "LOGVIEWER":
      case "logviewer":
        return this.config.enableLogViewer;
      case "info":
      case "config":
      case "session":
        return true; // System logs “Ø—Ä–≥—ç–ª–∂ –∏–¥—ç–≤—Ö—Ç—ç–π
      default:
        return true; // –ú—ç–¥—ç–≥–¥—ç—Ö–≥“Ø–π category-–≥ default –∞–∂–∏–ª–ª—É—É–ª–∞—Ö
    }
  }

  // Tracking-—Ç–∞–π —Ö–æ–ª–±–æ–æ—Ç–æ–π –±“Ø—Ö “Ø–π–ª–¥–ª“Ø“Ø–¥–∏–π–≥ —à–∞–ª–≥–∞—Ö
  shouldTrack(category) {
    return this.isTrackingEnabled(category);
  }

  // –î–∞–≤—Ö—Ü—Å–∞–Ω –ª–æ–≥ —à–∞–ª–≥–∞—Ö
  isDuplicateLog(message) {
    const now = Date.now();
    if (this.lastLogMessage === message && now - this.lastLogTime < this.duplicateThreshold) {
      return true;
    }
    this.lastLogTime = now;
    this.lastLogMessage = message;
    return false;
  }

  /**
   * Core logging method with automatic metadata
   * @param {string} action - –•–∏–π–≥–¥—ç–∂ –±—É–π “Ø–π–ª–¥–ª–∏–π–Ω —Ç–∞–π–ª–±–∞—Ä/–º–µ—Å—Å–µ–∂
   * @param {string} category - –õ–æ–≥–∏–π–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏ (auth, navigation, component, user_action, api, error –≥—ç—Ö –º—ç—Ç)
   * @param {Object} details - –ù—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª—ç–ª (object)
   * @param {string} level - –õ–æ–≥–∏–π–Ω —Ç“Ø–≤—à–∏–Ω (info, warn, error, debug)
   */
  log(action, category, details = {}, level = "info") {
    // Tracking –∏–¥—ç–≤—Ö–≥“Ø–π –±–æ–ª –∞–ª–≥–∞—Å–∞—Ö
    if (!this.shouldTrack(category)) {
      return;
    }

    const message = `[${category.toUpperCase()}] ${action}`;

    // –î–∞–≤—Ö—Ü—Å–∞–Ω –ª–æ–≥ —à–∞–ª–≥–∞—Ö
    if (this.isDuplicateLog(message)) {
      console.log(`üîÑ –î–∞–≤—Ö—Ü—Å–∞–Ω –ª–æ–≥ –∞–ª–≥–∞—Å–∞–≥–¥—Å–∞–Ω: ${message}`);
      return; // –î–∞–≤—Ö—Ü—Å–∞–Ω –ª–æ–≥ “Ø–≥“Ø–π—Å–≥—ç—Ö
    }

    this.activityCount++;

    const enrichedDetails = {
      ...details,
      sessionId: this.sessionId,
      activityCount: this.activityCount,
      timestamp: this.getAsiaTimestamp(),
      category,
      action,
      user: this.getCurrentUser(), // Add current user
      url: typeof window !== "undefined" ? window.location.href : "unknown",
      userAgent: typeof navigator !== "undefined" ? navigator.userAgent : "unknown",
    };

    // Console debug –º—ç–¥—ç—ç–ª—ç–ª –Ω—ç–º—ç—Ö
    console.log(`üìù Log [${category}]: ${action}`, enrichedDetails);

    switch (level) {
      case "error":
        logger.error(message, enrichedDetails);
        break;
      case "warn":
        logger.warn(message, enrichedDetails);
        break;
      case "debug":
        logger.debug(message, enrichedDetails);
        break;
      default:
        logger.info(message, enrichedDetails);
    }
  }

  // === USER AUTHENTICATION ===
  trackLogin(username, success, details = {}) {
    this.log(
      success ? "–ù—ç–≤—Ç—Ä—ç—Ö –∞–º–∂–∏–ª—Ç—Ç–∞–π" : "–ù—ç–≤—Ç—Ä—ç—Ö –∞–º–∂–∏–ª—Ç–≥“Ø–π",
      "auth",
      { username: username?.substring(0, 3) + "***", success, ...details },
      success ? "info" : "warn"
    );
  }

  trackLogout(reason = "user_action") {
    this.log("–°–∏—Å—Ç–µ–º—ç—ç—Å –≥–∞—Ä—Å–∞–Ω", "auth", { reason });
  }

  // === NAVIGATION ===
  trackPageView(pageName, route) {
    if (!this.config.enableNavigation) return; // Navigation tracking –∏–¥—ç–≤—Ö–≥“Ø–π –±–æ–ª –∞–ª–≥–∞—Å–∞—Ö

    // –ó”©–≤—Ö”©–Ω —á—É—Ö–∞–ª —Ö—É—É–¥—Å—É—É–¥—ã–≥ –ª–æ–≥ —Ö–∏–π—Ö
    const importantPages = ["login", "dashboard", "admin", "reports", "settings"];
    if (importantPages.some((page) => pageName.toLowerCase().includes(page))) {
      this.log("–ß—É—Ö–∞–ª —Ö—É—É–¥–∞—Å –Ω—ç—ç–≥–¥—Å—ç–Ω", "navigation", { pageName, route });
    }
  }

  trackRouteChange(fromRoute, toRoute) {
    if (!this.config.enableNavigation) return; // Navigation tracking –∏–¥—ç–≤—Ö–≥“Ø–π –±–æ–ª –∞–ª–≥–∞—Å–∞—Ö

    // Route ”©”©—Ä—á–ª”©–ª—Ç –∑”©–≤—Ö”©–Ω error tracking-–¥
    if (fromRoute && toRoute && fromRoute !== toRoute) {
      this.log(
        `Route ”©”©—Ä—á–ª”©–≥–¥—Å”©–Ω: ${fromRoute} ‚Üí ${toRoute}`,
        "navigation",
        {
          fromRoute,
          toRoute,
        },
        "debug"
      ); // debug level –±–æ–ª–≥–æ—Ö
    }
  }

  // Configuration methods - –¢–æ—Ö–∏—Ä–≥–æ–æ–≥ –ø—Ä–æ–≥—Ä–∞–º–º–∞–∞—Å —É–¥–∏—Ä–¥–∞—Ö
  enableNavigationTracking(enable = true) {
    this.config.enableNavigation = enable;
    this.log(`Navigation tracking ${enable ? "–∏–¥—ç–≤—Ö–∂“Ø“Ø–ª—ç–≥–¥—Å—ç–Ω" : "–∏–¥—ç–≤—Ö–≥“Ø–π –±–æ–ª–≥–æ–≥–¥—Å–æ–Ω"}`, "config");
  }

  enableModalTracking(enable = true) {
    this.config.enableModals = enable;
    this.log(`Modal tracking ${enable ? "–∏–¥—ç–≤—Ö–∂“Ø“Ø–ª—ç–≥–¥—Å—ç–Ω" : "–∏–¥—ç–≤—Ö–≥“Ø–π –±–æ–ª–≥–æ–≥–¥—Å–æ–Ω"}`, "config");
  }

  enableComponentTracking(enable = true) {
    this.config.enableComponents = enable;
    this.log(`Component tracking ${enable ? "–∏–¥—ç–≤—Ö–∂“Ø“Ø–ª—ç–≥–¥—Å—ç–Ω" : "–∏–¥—ç–≤—Ö–≥“Ø–π –±–æ–ª–≥–æ–≥–¥—Å–æ–Ω"}`, "config");
  }

  // Debug —Ñ—É–Ω–∫—Ü“Ø“Ø–¥ - browser console –¥—ç—ç—Ä –∞—à–∏–≥–ª–∞—Ö–∞–¥ —Ç–æ—Ö–∏—Ä–æ–º–∂—Ç–æ–π
  debugConfig() {
    console.log("üîß ActivityTracker —Ç–æ—Ö–∏—Ä–≥–æ–æ:", this.config);
    return this.config;
  }

  disableAllComponentTracking() {
    this.config.enableComponents = false;
    this.config.enableModals = false;
    this.config.enableNavigation = false;
    console.log("üö´ –ë“Ø—Ö component/modal/navigation tracking –∏–¥—ç–≤—Ö–≥“Ø–π –±–æ–ª–≥–æ–≥–¥—Å–æ–Ω");
    return this.config;
  }

  // === COMPONENT TRACKING ===
  trackComponentMount(componentName, props = {}) {
    if (!this.config.enableComponents) return; // Component tracking –∏–¥—ç–≤—Ö–≥“Ø–π –±–æ–ª –∞–ª–≥–∞—Å–∞—Ö

    this.log(`${componentName} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω—ç—ç–≥–¥—Å—ç–Ω`, "component", {
      componentName,
      propsCount: Object.keys(props).length,
      mountTime: new Date().toISOString(),
    });
  }

  trackComponentUnmount(componentName) {
    if (!this.config.enableComponents) return; // Component tracking –∏–¥—ç–≤—Ö–≥“Ø–π –±–æ–ª –∞–ª–≥–∞—Å–∞—Ö

    this.log(`${componentName} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ö–∞–∞–≥–¥—Å–∞–Ω`, "component", {
      componentName,
      unmountTime: new Date().toISOString(),
    });
  }

  trackUserAction(componentName, actionType, details = {}) {
    this.log(`${componentName}: ${actionType}`, "user_action", {
      componentName,
      actionType,
      ...details,
    });
  }

  trackButtonClick(buttonName, componentName, context = {}) {
    this.log(`–¢–æ–≤—á –¥–∞—Ä–∞–≥–¥—Å–∞–Ω: ${buttonName}`, "user_action", {
      buttonName,
      componentName,
      clickTime: new Date().toISOString(),
      ...context,
    });
  }

  trackModalOpen(modalName, data = {}) {
    if (!this.config.enableModals) return; // Modal tracking –∏–¥—ç–≤—Ö–≥“Ø–π –±–æ–ª –∞–ª–≥–∞—Å–∞—Ö

    this.log(`${modalName} –º–æ–¥–∞–ª –Ω—ç—ç–≥–¥—Å—ç–Ω`, "modal", {
      modalName,
      openTime: new Date().toISOString(),
      ...data,
    });
  }

  trackModalClose(modalName, duration = null) {
    if (!this.config.enableModals) return; // Modal tracking –∏–¥—ç–≤—Ö–≥“Ø–π –±–æ–ª –∞–ª–≥–∞—Å–∞—Ö

    this.log(`${modalName} –º–æ–¥–∞–ª —Ö–∞–∞–≥–¥—Å–∞–Ω`, "modal", {
      modalName,
      closeTime: new Date().toISOString(),
      duration,
    });
  }

  trackTabSwitch(fromTab, toTab) {
    if (!this.config.enableNavigation) return; // Navigation tracking –∏–¥—ç–≤—Ö–≥“Ø–π –±–æ–ª –∞–ª–≥–∞—Å–∞—Ö

    this.log(`Tab —Å–æ–ª–∏–≥–¥—Å–æ–Ω: ${fromTab} ‚Üí ${toTab}`, "navigation", {
      fromTab,
      toTab,
      switchTime: new Date().toISOString(),
    });
  }

  // === FORM INTERACTIONS ===
  trackFormStart(formName) {
    this.log("Form —ç—Ö—ç–ª—Å—ç–Ω", "form", { formName });
  }

  trackFormSubmit(formName, success, validationErrors = []) {
    this.log(
      success ? "Form –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–≥–¥—Å—ç–Ω" : "Form –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞",
      "form",
      { formName, success, validationErrors },
      success ? "info" : "error"
    );
  }

  trackFormFieldChange(formName, fieldName, hasValue) {
    this.log(
      "Form —Ç–∞–ª–±–∞—Ä ”©”©—Ä—á–ª”©–≥–¥—Å”©–Ω",
      "form",
      {
        formName,
        fieldName,
        hasValue,
      },
      "debug"
    );
  }

  // === SEARCH & FILTER ===
  trackSearch(searchType, query, resultCount) {
    this.log("–•–∞–π–ª—Ç —Ö–∏–π–≥–¥—Å—ç–Ω", "search", {
      searchType,
      query: query?.substring(0, 50) + (query?.length > 50 ? "..." : ""),
      resultCount,
    });
  }

  trackFilter(filterType, filterValue, resultCount) {
    this.log("–®“Ø“Ø–ª—Ç —Ö–∏–π–≥–¥—Å—ç–Ω", "filter", { filterType, filterValue, resultCount });
  }

  trackSelection(itemType, itemId, itemName) {
    this.log("–≠–ª–µ–º–µ–Ω—Ç —Å–æ–Ω–≥–æ–≥–¥—Å–æ–Ω", "selection", {
      itemType,
      itemId,
      itemName: itemName?.substring(0, 100),
    });
  }

  // === EXCEL INTEGRATION ===
  trackExcelAction(action, details = {}) {
    this.log(`Excel ${action}`, "excel", details);
  }

  trackCellEdit(cellAddress, oldValue, newValue) {
    this.log("Excel –Ω“Ø–¥ –∑–∞—Å–∞–≥–¥—Å–∞–Ω", "excel", {
      cellAddress,
      hasOldValue: !!oldValue,
      hasNewValue: !!newValue,
    });
  }

  trackDataInsertion(dataType, rowCount, source) {
    this.log("”®–≥”©–≥–¥”©–ª Excel-–¥ –æ—Ä—É—É–ª–∞—Å–∞–Ω", "excel", { dataType, rowCount, source });
  }

  // === API CALLS ===
  trackApiCall(category, action, method, endpoint, details = {}) {
    this.log(`API ${method} ${action}`, category || "api", { endpoint, method, ...details });
  }

  trackDataLoad(dataType, recordCount, loadTime) {
    this.log("”®–≥”©–≥–¥”©–ª –∞—á–∞–∞–ª–∞–≥–¥—Å–∞–Ω", "data", { dataType, recordCount, loadTime });
  }

  // === ERRORS & WARNINGS ===
  trackError(errorType, errorMessage, context = {}) {
    this.log(
      "–ê–ª–¥–∞–∞ –≥–∞—Ä—Å–∞–Ω",
      "error",
      {
        errorType,
        errorMessage: errorMessage?.substring(0, 200),
        context,
      },
      "error"
    );
  }

  trackWarning(warningType, warningMessage, context = {}) {
    this.log(
      "–°—ç—Ä—ç–º–∂–ª“Ø“Ø–ª—ç–≥",
      "warning",
      {
        warningType,
        warningMessage: warningMessage?.substring(0, 200),
        context,
      },
      "warn"
    );
  }

  // === GENERAL ACTIONS ===
  trackAction(category, action, details = {}) {
    this.log(`${action}`, category, details, "info");
  }

  trackSuccess(category, action, details = {}) {
    this.log(`${action}`, category, details, "info");
  }

  // === PERFORMANCE ===
  trackPerformance(operation, duration, details = {}) {
    const level = duration > 5000 ? "warn" : duration > 2000 ? "info" : "debug";
    this.log(
      "–ì“Ø–π—Ü—ç—Ç–≥—ç–ª —Ö—ç–º–∂—ç—ç",
      "performance",
      {
        operation,
        duration: `${duration}ms`,
        ...details,
      },
      level
    );
  }

  // === SESSION INFO ===
  getSessionInfo() {
    return {
      sessionId: this.sessionId,
      startTime: this.startTime,
      activityCount: this.activityCount,
      duration: Date.now() - new Date(this.startTime).getTime(),
    };
  }

  // === BULK LOGGING ===
  trackBulkActivity(activities) {
    activities.forEach((activity) => {
      this.log(activity.action, activity.category, activity.details, activity.level);
    });
  }
}

// Create singleton instance
const activityTracker = ActivityTracker.getInstance();

// Browser console –¥—ç—ç—Ä –∞—à–∏–≥–ª–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π –±–æ–ª–≥–æ—Ö
if (typeof window !== "undefined") {
  window.activityTracker = activityTracker;
}

// Auto-track page visibility changes
if (typeof document !== "undefined") {
  document.addEventListener("visibilitychange", () => {
    activityTracker.log(document.hidden ? "–•—É—É–¥–∞—Å –Ω—É—É–≥–¥—Å–∞–Ω" : "–•—É—É–¥–∞—Å —Ö–∞—Ä–∞–≥–¥—Å–∞–Ω", "session");
  });
}

export default activityTracker;
export { ActivityTracker };
