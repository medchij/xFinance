{"version":3,"file":"72.js","mappings":"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","sources":["webpack://xfinance/./src/XFinance/xFinance.js","webpack://xfinance/./src/XFinance/apiHelpers.js","webpack://xfinance/./src/config.js"],"sourcesContent":["import {withLoading} from \"./apiHelpers\"; // туслах функц\nimport { BASE_URL } from \"../config\";\n//Үндсэн функцүүд\nexport let lastImportedData = null;\n async function loadXLSX() {\n   return window.XLSX;\n}\n\n\nexport const handleFileImport = async (\n  event,\n  {\n    sheetName, // 🆕 хэрэглэгчийн сонгосон нэр\n    setLoading,\n    setErrorMessage,\n    setSheetData,\n    setConfirmDialogOpen,\n    setImportStatus,\n    setSheetDialogOpen,\n  }\n) => {\n  const file = event.target.files[0];\n  if (!file || !sheetName) {\n    setErrorMessage(\"❌ Sheet нэр эсвэл файл олдсонгүй.\");\n    return;\n  }\n\n  await withLoading(setLoading, setErrorMessage, async () => {\n    const reader = new FileReader();\n    const buffer = await new Promise((resolve, reject) => {\n      reader.onload = (e) => resolve(e.target.result);\n      reader.onerror = (err) => reject(err);\n      reader.readAsArrayBuffer(file);\n    });\n\n    const data = new Uint8Array(buffer);\n    const XLSX = await loadXLSX();\n    const workbook = XLSX.read(data, { type: \"array\" });\n    const firstSheetName = workbook.SheetNames[0];\n    const firstSheet = workbook.Sheets[firstSheetName];\n    const rawSheetData = XLSX.utils.sheet_to_json(firstSheet, { header: 1 });\n\n    const processedData = rawSheetData.map((row) =>\n      row.map((cell) => {\n        if (typeof cell === \"number\" && cell.toString().length > 15) return \"'\" + cell;\n        if (typeof cell === \"string\" && /^\\d{16,}$/.test(cell)) return \"'\" + cell;\n        return cell;\n      })\n    );\n\n    setSheetData(processedData);\n\n    const sheetExists = await Excel.run(async (context) => {\n      const sheet = context.workbook.worksheets.getItemOrNullObject(sheetName);\n      await context.sync();\n      return !sheet.isNullObject;\n    });\n\n    if (sheetExists) {\n      setConfirmDialogOpen(true); // ❓ хуучин өгөгдөл байгаа тул зөвшөөрөл асуух\n    } else {\n      const { message, success } = await writeToImportSheet(\n        sheetName, // 🆕 sheetName ашиглана\n        processedData,\n        true,\n        setLoading,\n        setErrorMessage\n      );\n      setErrorMessage(message);\n      setImportStatus(success);\n      if (setSheetDialogOpen) setSheetDialogOpen(true);\n    }\n  });\n\n  event.target.value = null;\n};\n\nexport async function writeToImportSheet(sheetName, sheetData, confirmStatus, setLoading, setMessage) {\n  return withLoading(setLoading, setMessage, async () => {\n    return await Excel.run(async (context) => {\n      const workbook = context.workbook;\n      let sheet = workbook.worksheets.getItemOrNullObject(sheetName);\n      await context.sync();\n\n      const sheetExists = !sheet.isNullObject;\n\n      if (!sheetExists) {\n        sheet = workbook.worksheets.add(sheetName);\n        await context.sync();\n        confirmStatus = true; // шинэ sheet бол clear заавал хийнэ\n      }\n\n      let startRow = 0;\n\n      if (sheetExists && confirmStatus) {\n        const clearRange = sheetName === \"Import\" ? \"A:M\" : sheet.getUsedRange();\n        if (typeof clearRange === \"string\") {\n          sheet.getRange(clearRange).clear();\n        } else {\n          clearRange.load(\"address\");\n          await context.sync();\n          sheet.getRange(clearRange.address).clear();\n        }\n        await context.sync();\n      }\n\n      if (sheetExists && !confirmStatus) {\n        const usedRange = sheet.getRange(\"A:A\").getUsedRangeOrNullObject();\n        usedRange.load(\"rowCount\");\n        await context.sync();\n        startRow = usedRange.isNullObject ? 0 : usedRange.rowCount;\n\n        setMessage(\"⚠️ Хуучин өгөгдлийг хадгалж, үргэлжлүүлж бичлээ.\");\n        await new Promise((resolve) => setTimeout(resolve, 2500));\n      }\n\n      const rows = sheetData.length;\n      const columns = sheetData.reduce((max, row) => Math.max(max, row.length), 0);\n\n      if (rows === 0 || columns === 0) {\n        throw new Error(\"❌ SheetData хоосон байна!\");\n      }\n\n      if (sheetName === \"Import\" && columns > 13) {\n        throw new Error(\"❌ Баганын тоо 13-аас хэтэрсэн байна!\");\n      }\n\n      const normalizedData = sheetData.map((row) =>\n        row.length === columns ? row : [...row, ...Array(columns - row.length).fill(\"\")]\n      );\n\n      const range = sheet.getRangeByIndexes(startRow, 0, rows, columns); // ✨ Нэмэх эсвэл A1-с бичих\n      range.values = normalizedData;\n      range.format.autofitColumns();\n      range.format.autofitRows();\n\n      sheet.activate();\n      await context.sync();\n\n      const message = `✅ \"${sheetName}\" sheet дээр өгөгдөл амжилттай бичигдлээ!`;\n      setMessage(message);\n      return { message, success: true };\n    });\n  });\n}\n\nexport async function insertText(text) {\n  // Write text to the top left cell.\n  try {\n    await Excel.run(async (context) => {\n      const sheet = context.workbook.worksheets.getActiveWorksheet();\n      const range = sheet.getRange(\"A1\");\n      range.values = [[text]];\n      range.format.autofitColumns();\n      await context.sync();\n    });\n  } catch (error) {\n    console.log(\"Error: \" + error);\n  }\n}\n//Тоо руу хөрвүүлэх функц\nexport const handleNumberConversion = async (setMessage, setLoading) => {\n  return withLoading(setLoading, setMessage, async () => {\n    await Excel.run(async (context) => {\n      const range = context.workbook.getSelectedRange();\n      range.load(\"values\");\n      await context.sync();\n\n      range.numberFormat = [['_(* #,##0_);_(* (#,##0);_(* \"-\"??_);_(@_)']];\n      range.values = range.values;\n\n      await context.sync();\n    });\n\n    setMessage(\"✅ Амжилттай!\");\n    console.log(\"✅ Тоо руу хөрвүүлэлт амжилттай\");\n  });\n};\n\n//Текст рүү хөрвүүлэх функц\nexport const handleTextConversion = async (setMessage, setLoading) => {\n  return withLoading(setLoading, setMessage, async () => {\n    await Excel.run(async (context) => {\n      const range = context.workbook.getSelectedRange();\n      range.load(\"values\");\n      await context.sync();\n\n      const originalValues = range.values;\n\n      const newValues = originalValues.map((row) =>\n        row.map((cell) => (cell !== null && cell !== \"\" ? `'${cell}` : \"\"))\n      );\n\n      range.values = newValues;\n      await context.sync();\n    });\n\n    setMessage(\"✅ Амжилттай!\");\n    console.log(\"✅ Текст хөрвүүлэлт амжилттай\");\n  });\n};\n\n// ✅ Excel-ийн идэвхтэй нүдэнд утга оруулах функц\nexport const setActiveCellValue = async (value, setMessage, setLoading) => {\n  return withLoading(setLoading, setMessage, async () => {\n    await Excel.run(async (context) => {\n      const range = context.workbook.getActiveCell();\n      range.values = `'${value}`;\n      await context.sync();\n    });\n\n    setMessage(\"✅ Амжилттай\");\n    console.log(\"✅ Идэвхтэй нүдэнд утга амжилттай бичигдлээ:\", value);\n  });\n};\n\nexport const setActiveCellValue2 = async (value, setMessage, setLoading) => {\n  return withLoading(setLoading, setMessage, async () => {\n    await Excel.run(async (context) => {\n      const range = context.workbook.getActiveCell();\n      range.values = [[value]];\n      await context.sync();\n    });\n\n    setMessage(\"✅ Амжилттай\");\n    console.log(\"✅ Идэвхтэй нүдэнд утга амжилттай бичигдлээ:\", value);\n  });\n};\n\n// ✅ Excel-ийн идэвхтэй нүдний утгыг авах функц\nexport const getActiveCellValue = async (setMessage, setLoading) => {\n  return withLoading(setLoading, setMessage, async () => {\n    const value = await Excel.run(async (context) => {\n      const range = context.workbook.getActiveCell();\n      range.load(\"values\");\n      await context.sync();\n      return range.values[0][0];\n    });\n\n    setMessage(`✅ Утга: ${value}`);\n    сonsole.log(\"✅ Идэвхтэй нүдний утга:\", value);\n    return value;\n  });\n};\n// Идэвхтэй байгаа нүдний formula-г авах функц\nexport const getActiveCellFormula = async (setMessage, setLoading) => {\n  return withLoading(setLoading, setMessage, async () => {\n    const formula = await Excel.run(async (context) => {\n      const range = context.workbook.getActiveCell();\n      range.load(\"formulas\");\n      await context.sync();\n      return range.formulas[0][0];\n    });\n\n    setMessage(`✅ Formula: ${formula}`);\n    console.log(\"✅ Идэвхтэй байгаа нүдний formula:\", formula);\n    return formula;\n  });\n};\n// ✅ Идэвхтэй нүдний утгаар шүүх функц\nexport const filterByActiveCellValue = async (setMessage, setLoading) => {\n  return withLoading(setLoading, setMessage, async () => {\n    let filterRange;\n    let filterValue;\n\n    await Excel.run(async (context) => {\n      const sheet = context.workbook.worksheets.getActiveWorksheet();\n      const activeCell = context.workbook.getActiveCell();\n\n      activeCell.load([\"rowIndex\", \"columnIndex\", \"values\"]);\n      await context.sync();\n\n      const rowIndex = activeCell.rowIndex;\n      const colIndex = activeCell.columnIndex;\n      filterValue = activeCell.values[0][0];\n\n      const usedRange = sheet.getUsedRange();\n      usedRange.load([\"rowCount\", \"columnCount\"]);\n      await context.sync();\n\n      const rowRange = sheet.getRangeByIndexes(rowIndex, 0, 1, usedRange.columnCount);\n      const lastCellInRow = rowRange.getLastCell();\n      lastCellInRow.load(\"columnIndex\");\n      await context.sync();\n\n      const lastColIndex = lastCellInRow.columnIndex;\n      const totalRows = usedRange.rowCount;\n      const dataRowCount = totalRows - rowIndex;\n\n      if (dataRowCount <= 1) {\n        throw new Error(\"⚠️ Доош мөр алга байна.\");\n      }\n\n      filterRange = sheet.getRangeByIndexes(rowIndex, colIndex, dataRowCount, 1);\n      filterRange.load(\"address\");\n      await context.sync();\n\n      // AutoFilter цэвэрлэх\n      try {\n        sheet.autoFilter.clear();\n      } catch (e) {\n        console.warn(\"AutoFilter байхгүй эсвэл цэвэрлэгдсэн:\", e.message);\n      }\n\n      sheet.tables.load(\"items\");\n      await context.sync();\n\n      sheet.tables.items.forEach((table) => table.convertToRange());\n      await context.sync();\n\n      const table = sheet.tables.add(filterRange.address, true);\n      table.name = \"FilteredTable\";\n      table.style = \"TableStyleLight1\";\n      table.showBandedRows = false;\n      table.showBandedColumns = false;\n      table.getHeaderRowRange().format.fill.clear();\n      table.getHeaderRowRange().format.font.bold = false;\n\n      table.columns.getItemAt(0).filter.applyCustomFilter(`*${filterValue}*`, null);\n\n      const msg = `✅ \"${filterValue}\" утгаар filter тавигдлаа. FilterRange: ${filterRange.address}`;\n      setMessage(msg);\n      console.log(msg);\n    });\n  });\n};\n\nexport const clearAutoFilter = async (setMessage, setLoading) => {\n  return withLoading(setLoading, setMessage, async () => {\n    await Excel.run(async (context) => {\n      const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n      const tables = sheet.tables;\n      tables.load(\"items/name\");\n      await context.sync();\n\n      const filteredTable = tables.items.find((t) => t.name === \"FilteredTable\");\n      if (!filteredTable) {\n        throw new Error(\"⚠️ 'FilteredTable' нэртэй хүснэгт олдсонгүй.\");\n      }\n\n      filteredTable.clearFilters();\n      await context.sync();\n\n      const range = filteredTable.getRange();\n      range.load([\"columnCount\", \"values\", \"format\"]);\n      await context.sync();\n\n      filteredTable.convertToRange();\n      await context.sync();\n\n      const headerRow = range.getRow(0);\n      headerRow.load(\"values\");\n      await context.sync();\n\n      const originalValues = headerRow.values[0];\n      const cleanedValues = originalValues.map((v) =>\n        typeof v === \"string\" && v.toLowerCase().includes(\"column\") ? \"\" : v\n      );\n\n      headerRow.values = [cleanedValues];\n      await context.sync();\n    });\n\n    setMessage(\"✅ FilteredTable амжилттай цэвэрлэгдлээ.\");\n    console.log(\"✅ FilteredTable амжилттай цэвэрлэгдлээ.\");\n  });\n};\n\n\nexport async function fetchAccountBalanceData(setMessage, setLoading) {\n  return withLoading(setLoading, setMessage, async () => {\n    setMessage(\"⏳ Дансны мэдээллийг татаж байна...\");\n\n    // Backend-ээс дансны жагсаалт татах (timeout-той)\n    const res = await fetch(`${BASE_URL}/api/account`);\n    if (!res.ok) throw new Error(\"Серверээс амжилтгүй хариу ирлээ.\");\n    const data = await res.json();\n\n    // Хариу массив эсэхийг шалгая\n    if (!Array.isArray(data)) {\n      throw new Error(\"Серверийн хариу буруу форматтай байна (Array хүлээсэн).\");\n    }\n\n    await Excel.run(async (context) => {\n      const sheet = context.workbook.worksheets.getItemOrNullObject(\"AccountBalance\");\n      await context.sync();\n\n      if (sheet.isNullObject) {\n        throw new Error(\"⚠️ 'AccountBalance' нэртэй хуудас олдсонгүй.\");\n      }\n\n      const headerRow = sheet.getRange(\"A5:C5\");\n      headerRow.load(\"values\");\n      await context.sync();\n\n      const headers = headerRow.values[0] || [];\n      const accountNameCol   = headers.indexOf(\"Дансны нэр\");\n      const accountNumberCol = headers.indexOf(\"Дансны дугаар\");\n      const currencyCol      = headers.indexOf(\"Валют\");\n\n      if (accountNameCol === -1 || accountNumberCol === -1 || currencyCol === -1) {\n        throw new Error(\"⚠️ A5–C5 мөрөнд 'Дансны нэр', 'Дансны дугаар', 'Валют' баганууд байхгүй байна.\");\n      }\n\n      // ✨ Дансны дугаараар эрэмбэлэх\n      data.sort((a, b) => {\n        const numA = (a[\"Дансны дугаар\"] || \"\").toString();\n        const numB = (b[\"Дансны дугаар\"] || \"\").toString();\n        return numA.localeCompare(numB, undefined, { numeric: true });\n      });\n\n      // A8-с эхлэн бичих\n      const startRow = 8;\n      data.forEach((item, idx) => {\n        const rowIdx = startRow + idx;\n        sheet.getCell(rowIdx, accountNameCol).values   = [[item[\"Дансны нэр\"] || \"\"]];\n        sheet.getCell(rowIdx, accountNumberCol).values = [[`'${item[\"Дансны дугаар\"] || \"\"}`]]; // текст болгох\n        sheet.getCell(rowIdx, currencyCol).values      = [[item[\"Валют\"] || \"\"]];\n      });\n\n      await context.sync();\n    });\n\n    setMessage(\"✅ Амжилттай.\");\n    console.log(\"✅ Дансны мэдээллийг амжилттай орууллаа:\", /* Preview */ data.slice(0, 3));\n  });\n}\n\n\n// Excel-д ашиглагдаж буй range-ийг export хийх функц\nexport async function exportSelectedRangesToXLSX(setMessage) {\n  try {\n    await Excel.run(async (context) => {\n      const sheet = context.workbook.worksheets.getActiveWorksheet();\n      const selection = context.workbook.getSelectedRange();\n      const currentRegion = selection.getSurroundingRegion();\n      currentRegion.load(\"values, address\");\n      await context.sync();\n\n      const values = currentRegion.values;\n      if (!values || values.length === 0) {\n        throw new Error(\"⚠️ CurrentRegion-д утга алга.\");\n      }\n\n      \n      const XLSX = await loadXLSX();\n      const wb = XLSX.utils.book_new();\n      const ws = XLSX.utils.aoa_to_sheet(values);\n      XLSX.utils.book_append_sheet(wb, ws, \"CurrentRegion\");\n\n      const wbout = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n      const blob = new Blob([wbout], { type: \"application/octet-stream\" });\n\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = \"CurrentRegionExport.xlsx\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      setMessage(\"✅ CurrentRegion экспорт хийгдлээ.\");\n    });\n  } catch (error) {\n    console.error(\"❌ Export error:\", error);\n    setMessage(\"❌ Алдаа гарлаа: \" + error.message);\n  }\n}\n","import { BASE_URL } from \"../config\";\r\n\r\nexport async function withLoading(setLoading, setMessage, fn) {\r\n  try {\r\n    setLoading(true);\r\n    const output = await fn();\r\n\r\n    // fetch-ийн Response буцсан бол шалгах\r\n    if (output?.response instanceof Response) {\r\n      console.log(\"📡 HTTP:\", output.response.statusText + \" \" + output.response.status);\r\n      if (!output.response.ok) {\r\n        const text = await output.response.text();\r\n        throw new Error(\"❌ Серверийн алдаа: \" + text);\r\n      }\r\n    }\r\n\r\n    return output;\r\n\r\n  } catch (error) {\r\n    setMessage(\"❌ Алдаа гарлаа: \" + (error?.message || error));\r\n    console.error(\"API Error:\", error?.message || error);\r\n    throw error;\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n}\r\n\r\n// ✅ 2) settings.json ачаалахдаа env URL ашиглах + timeout\r\nexport async function loadSettings() {\r\n  const res = await fetch(`${BASE_URL}/api/settings`);\r\n  if (!res.ok) throw new Error(\"⚠️ Settings.json татаж чадсангүй\");\r\n  return await res.json();\r\n}\r\n\r\nexport function getSettingValue(settings, name) {\r\n  return settings.find((s) => s.name === name)?.value || \"\";\r\n}\r\nexport function getSettingId(settings, name) {\r\n  return settings.find((s) => s.name === name)?.id || \"\";\r\n}\r\n\r\n// Excel огноог нормчлох туслах функц\r\nexport function normalizeExcelDate(value, label) {\r\n  if (!value || (typeof value !== \"number\" && typeof value !== \"string\")) {\r\n    throw new Error(`📅 ${label} нүдэнд огноо оруулна уу (2025-01-30 эсвэл Excel огнооны format)`);\r\n  }\r\n  if (typeof value === \"number\") {\r\n    const excelEpoch = new Date(1899, 11, 30);\r\n    const dateObj = new Date(excelEpoch.getTime() + value * 86400000);\r\n    value = dateObj.toISOString().split(\"T\")[0];\r\n  }\r\n  if (typeof value === \"string\" && !/^\\d{4}-\\d{2}-\\d{2}$/.test(value)) {\r\n    throw new Error(`📅 ${label} буруу байна. YYYY-MM-DD хэлбэртэй байвал зохимжтой.`);\r\n  }\r\n  return value.toString().trim();\r\n}\r\n\r\n// 15-с дээш цифртэй тоог Excel-д текстээр хадгалах\r\nexport function formatLargeNumber(cell) {\r\n  if (typeof cell === \"number\" && cell.toString().length > 15) {\r\n    return \"'\" + cell.toString();\r\n  }\r\n  if (typeof cell === \"string\" && /^\\d{16,}$/.test(cell)) {\r\n    return \"'\" + cell;\r\n  }\r\n  return cell;\r\n}\r\n\r\n// (Сонголт) skipRight параметр: баруун талын n баганыг үл тооцох\r\nexport async function hideEmptyColumns(setMessage, skipRight = 14) {\r\n  try {\r\n    await Excel.run(async (context) => {\r\n      const sheet = context.workbook.worksheets.getActiveWorksheet();\r\n      const usedRange = sheet.getUsedRange();\r\n      usedRange.load([\"rowCount\", \"columnCount\"]);\r\n      await context.sync();\r\n\r\n      const rowCount = usedRange.rowCount;\r\n      const columnCount = Math.max(0, usedRange.columnCount - (skipRight || 0));\r\n      console.log(`📊 Хэрэглэгдэж буй муж: ${rowCount} мөр, ${columnCount} багана (баруунаас алгассан: ${skipRight})`);\r\n\r\n      for (let i = 0; i < columnCount; i++) {\r\n        const colRange = sheet.getRangeByIndexes(0, i, rowCount, 1);\r\n        colRange.load(\"values\");\r\n        await context.sync();\r\n\r\n        const values = colRange.values.flat();\r\n        const isEmpty = values.every((val) => val === null || val === \"\");\r\n        if (isEmpty) colRange.columnHidden = true;\r\n      }\r\n\r\n      await context.sync();\r\n      if (setMessage) setMessage(\"✅ Хоосон баганууд амжилттай нууж дууслаа.\");\r\n    });\r\n  } catch (error) {\r\n    console.error(\"❌ Хоосон багана нуухад алдаа гарлаа:\", error);\r\n    if (setMessage) setMessage(\"❌ Алдаа: \" + error.message);\r\n  }\r\n}\r\n\r\n// 🎨 Санамсаргүй өнгө үүсгэх (async биш)\r\nexport function getRandomPastelColor() {\r\n  const r = Math.floor(180 + Math.random() * 60);\r\n  const g = Math.floor(180 + Math.random() * 60);\r\n  const b = Math.floor(180 + Math.random() * 60);\r\n  return \"#\" + r.toString(16).padStart(2, \"0\") + g.toString(16).padStart(2, \"0\") + b.toString(16).padStart(2, \"0\");\r\n}\r\n\r\nexport function handleHttpError(response, result) {\r\n  const statusCode = result?.status?.code;\r\n  const httpCode = response.status;\r\n  const msg =\r\n    result?.status?.message || result?.message || result?.error || `Серверийн хариу амжилтгүй: ${httpCode}`;\r\n\r\n  if (httpCode === 401 || statusCode === 401) {\r\n    throw new Error(\"Token хүчингүй эсвэл хугацаа нь дууссан байна. Дахин нэвтэрнэ үү.\");\r\n  }\r\n  if (httpCode === 404 || statusCode === 404) {\r\n    throw new Error(`Дата олдсонгүй: ${msg}`);\r\n  }\r\n  if (httpCode === 400 || statusCode === 400) {\r\n    throw new Error(`Алдаатай хүсэлт: ${msg}`);\r\n  }\r\n\r\n  throw new Error(msg); // илүү зайгүй\r\n}\r\n\r\n// ✅ 3) Давхардалгүй хадгалах — set ашиглана\r\nexport async function saveSetting(key, value) {\r\n  return await Excel.run(async (context) => {\r\n    const settings = context.workbook.settings;\r\n    settings.set(key, value); // add биш — set (байхгүй бол үүсгэнэ, байвал шинэчилнэ)\r\n    await context.sync();\r\n  });\r\n}\r\n","// config.js\r\nconst isBrowser = typeof window !== \"undefined\";\r\nconst isLocalHost = isBrowser && /^(localhost|127\\.0\\.0\\.1)$/i.test(window.location.hostname);\r\n\r\nconst envUrl =\r\n  (typeof process !== \"undefined\" && process.env?.REACT_APP_API_URL) || \"\";\r\n\r\nexport const BASE_URL = isLocalHost\r\n  ? \"http://localhost:4000\" // 🔴 локалд үргэлж энэ\r\n  : (window.__XFINANCE_API_URL ||\r\n     (envUrl ? envUrl.replace(/\\/+$/, \"\") : (isBrowser ? window.location.origin : \"\")));\r\n"],"names":["lastImportedData","async","loadXLSX","window","XLSX","handleFileImport","event","sheetName","setLoading","setErrorMessage","setSheetData","setConfirmDialogOpen","setImportStatus","setSheetDialogOpen","file","target","files","withLoading","reader","FileReader","buffer","Promise","resolve","reject","onload","e","result","onerror","err","readAsArrayBuffer","data","Uint8Array","workbook","read","type","firstSheetName","SheetNames","firstSheet","Sheets","processedData","utils","sheet_to_json","header","map","row","cell","toString","length","test","Excel","run","sheet","context","worksheets","getItemOrNullObject","sync","isNullObject","message","success","writeToImportSheet","value","sheetData","confirmStatus","setMessage","sheetExists","add","startRow","clearRange","getUsedRange","getRange","clear","load","address","usedRange","getUsedRangeOrNullObject","rowCount","setTimeout","rows","columns","reduce","max","Math","Error","normalizedData","Array","fill","range","getRangeByIndexes","values","format","autofitColumns","autofitRows","activate","insertText","text","getActiveWorksheet","error","console","log","handleNumberConversion","getSelectedRange","numberFormat","handleTextConversion","newValues","setActiveCellValue","getActiveCell","setActiveCellValue2","getActiveCellFormula","formula","formulas","filterByActiveCellValue","filterRange","filterValue","activeCell","rowIndex","colIndex","columnIndex","lastCellInRow","columnCount","getLastCell","dataRowCount","autoFilter","warn","tables","items","forEach","table","convertToRange","name","style","showBandedRows","showBandedColumns","getHeaderRowRange","font","bold","getItemAt","filter","applyCustomFilter","msg","clearAutoFilter","filteredTable","find","t","clearFilters","headerRow","getRow","cleanedValues","v","toLowerCase","includes","fetchAccountBalanceData","res","fetch","BASE_URL","ok","json","isArray","headers","accountNameCol","indexOf","accountNumberCol","currencyCol","sort","a","b","numA","numB","localeCompare","undefined","numeric","item","idx","rowIdx","getCell","slice","exportSelectedRangesToXLSX","currentRegion","getSurroundingRegion","wb","book_new","ws","aoa_to_sheet","book_append_sheet","wbout","write","bookType","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","fn","output","response","Response","statusText","status","loadSettings","getSettingValue","settings","s","getSettingId","id","normalizeExcelDate","label","excelEpoch","Date","getTime","toISOString","split","trim","formatLargeNumber","hideEmptyColumns","skipRight","i","colRange","flat","every","val","columnHidden","handleHttpError","statusCode","code","httpCode","saveSetting","key","set","isBrowser","isLocalHost","location","hostname","envUrl","process","__XFINANCE_API_URL","replace","origin"],"sourceRoot":""}